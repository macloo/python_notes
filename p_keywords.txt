Python Keywords (lpthw Ex. 37)
These are ALL the keywords.
------------------------------

and - Boolean, see also "or", "not"
Example: if n == 3 and p <= 10:

del - delete from a list - different from "pop()"
Example: mylist = [a, b, c]
del mylist[0] # a will be gone 

from - used with "import"
Example: from sys import argv (Ex. 15)

not - Boolean, see also "and", "or"
Example: if not (a and b)

while - a type of loop
Example: while a < b:
Note: to have an infinite loop, write - while True:

as - assign an alias to a module (see also "with")
Example: import random as rnd
print rnd.randint(1, 10)

elif - means "else if"; use with "if" statements

global - use this keyword inside a function to change value of a variable OUTSIDE that function 
Example: see lpthw/test_global.py (my file)

or - Boolean, see also "and", "not"

with - seems to work with keyword "as":
To open a file, process its contents, and make sure to close it, you can write this:
with open("x.txt") as f:
    data = f.read()
Apparently this spares you from writing a line to close the file. 
http://effbot.org/zone/python-with-statement.htm 
See also:
http://docs.python.org/2/reference/compound_stmts.html#with

assert - error checking; test a statement
Example: assert 5 > 10 # this will throw an error (AssertionError) 
If it's True, nothing happens. 
http://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python 

else - the final line in an "if" statement (every "if" statement should have one)

if - testing for True or False, causing something to happen based on the result; can be followed by many lines of "elif" (see herein); ends with a single "else"
Tips: See http://learnpythonthehardway.org/book/ex36.html

pass - for controlling loops; in a loop, "pass" does nothing; program just goes to next thing. Nothing is skipped. (Typically used as a placeholder when you're building a new system of classes.) 
See lpthw/pass_continue.py (my file) (see also "continue") 

yield - used like "return", except the function will return a generator. What is a generator? It's similar to a list, but it's temporary. A clear explanation is here: 
http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained

break - for controlling loops; stops the loop immediately and goes back out to the main program, outside the loop (nothing after "break" will execute in that loop; the loop is canceled)
Example: see lpthw/modulo.py (my file) - line 25 
See also lpthw/pass_continue.py (my file) 

import - open an outside module (file) into the current one; see also "from"
Example: from sys import argv (Ex. 15)

print - write what follows this, onscreen 
Example: print "hello"

class - used to create objects in Python. 
The simplest form of class definition looks like this:
class ClassName:
    <statement-1>
    .
    .
    .
    <statement-N>
http://docs.python.org/2/tutorial/classes.html

exec - best to avoid using it. Runs code dynamically, e.g. if you load a file.
According to this, "exec" is often misused:
http://lucumr.pocoo.org/2011/2/1/exec-in-python/ 

in - see "for"
Example 1: for var in list: 
Example 2: for x in range(1, 11): 

is - keyword tests object identity; should NOT be used to test for string equality. It compares the memory address a object resides in. 
See lpthw/test_is.py (my file)

continue  - for controlling loops; "returns the control to the beginning of the loop." It doesn't do the following things - it goes back to the top of the loop.
See lpthw/pass_continue.py (my file) (see also "pass")

return - use to get values out of a function 
Example: see lpthw/learnpython_ex21_sup.py (my file)

def - declares a function
Example: def functionname(var):  

for - a type of loop
Example 1: for var in list: 
Example 2: for x in range(1, 11): 
Note: to start at 0, you can use (0, x) or simply (x) - parens needed
See also lpthw/enumerate_example.py (my file) 

lambda - used to create an anonymous function (a function with no name); must be on one line 
Example: f = lambda x: x**2 + 2*x - 5
See lpthw/lambda_example.py (my file) 

try - used for error handling; similar to "if" statement, ends with "else", but instead of "elif" the keyword for all instructions in between is "except" (see also "except") 
http://docs.python.org/2/tutorial/errors.html#handling-exceptions 

except - used for error handling with "try" (see also "try")
http://docs.python.org/2/tutorial/errors.html#handling-exceptions

raise - forces an Exception to occur (error message)
http://docs.python.org/2/tutorial/errors.html#raising-exceptions 

finally - optional clause with "try" (see also "try"); "useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful" 
http://docs.python.org/2/tutorial/errors.html#defining-clean-up-actions
